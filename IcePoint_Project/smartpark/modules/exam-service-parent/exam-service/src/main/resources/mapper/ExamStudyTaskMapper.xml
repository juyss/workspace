<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.tangyi.exam.mapper.ExamStudyTaskMapper">
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>


    <select id="getMyTasksByExample" resultType="Map">
        select xx.* from (
        (
        select
        t2.*,
        ifnull((select modify_date from exam_study_task_course_user_info where task_id=t.task_id and user_id=t.user_id
        and del_flag=0 order by modify_date desc limit 1) ,t.modify_date) studyDateTime,
        ifnull(t.study_time/t2.total_study_time * 100 ,0) percent,
        t.study_status
        from
        (select
        task_id,modify_date,study_time,study_status,user_id
        from exam_study_task_user_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        )t
        inner join exam_study_task t2 on t2.id=t.task_id and t2.del_flag=0 and t2.is_public=0 and t2.status=1
        )
        Union all
        (
        select
        t2.*,
        ifnull((select modify_date from exam_study_task_course_user_info where task_id=t2.id and del_flag=0 and
        <foreach collection="oredCriteria" item="criteria" separator="or">
            <if test="criteria.valid">
                <trim prefix="(" prefixOverrides="and" suffix=")">
                    <foreach collection="criteria.criteria" item="criterion">
                        <if test="criterion.singleValue and criterion.condition.contains('user_id')">
                            and ${criterion.condition} #{criterion.value}
                        </if>
                    </foreach>
                </trim>
            </if>
        </foreach>
        order by modify_date desc limit 1) ,t2.modify_date) studyDateTime,
        ifnull(t.study_time/t2.total_study_time * 100 ,0) percent,
        t.study_status
        from exam_study_task t2
        left join exam_study_task_user_info t on t.task_id=t2.id and t2.del_flag=0 and t2.is_public=1 and
        <foreach collection="oredCriteria" item="criteria" separator="or">
            <if test="criteria.valid">
                <trim prefix="(" prefixOverrides="and" suffix=")">
                    <foreach collection="criteria.criteria" item="criterion">
                        <if test="criterion.singleValue and criterion.condition.contains('user_id')">
                            and t.user_id= #{criterion.value}
                        </if>
                    </foreach>
                </trim>
            </if>
        </foreach>
        where
        t2.is_public=1
        <foreach collection="oredCriteria" item="criteria" separator="or">
            <if test="criteria.valid">
                <trim >
                    <foreach collection="criteria.criteria" item="criterion">
                        <!-- 在查询当前任务时，过滤掉公开的任务 -->
                        <if test="criterion.singleValue and criterion.condition.contains('study_status')">
                            and  t2.is_public=0
                        </if>
                    </foreach>
                </trim>
            </if>
        </foreach>
        and t2.del_flag=0
        and t2.status=1
        )
        ) xx
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="getMyTaskCourses" resultType="Map">
        select
        t1.course_name courseName,
        ifnull(t2.is_finish,0) isFinish,
        t1.id courseId,
        t.task_id taskId,
        t1.pic,
        t1.major,
        t1.course_type courseType,
        t1.teacher,
        t1.course_introduce courseIntroduce,
        t1.study_time studyTime,
        t1.course_time courseTime,
        t1.video,
        t1.video_pic
        from
        (select
        task_id,course_id
        from exam_study_task_course_relation
        where 1=1 and del_flag=0
        <if test="taskId != null">
           and task_id=#{taskId}
        </if>
        <if test="order != null and  sort != null and order != '' and  sort != ''">
            order by ${sort} ${order}
        </if>
        )t
        inner join exam_course t1 on t.course_id=t1.id and t1.del_flag=0 and t1.status=1
        left join exam_study_task_course_user_info t2 on t2.task_id=t.task_id and t2.exam_course_id=t.course_id and
        t2.del_flag=0
        <if test="userId != null">
            and t2.user_id=#{userId}
        </if>
        group by t1.id
        order by t1.create_date ${order}
    </select>

    <!--        + ifnull((select count(id) from exam_study_task where is_public=1 and del_flag=0 and  status=1 and
         not exists(select id from exam_study_task_user_info where user_id=#{userId} and task_id=exam_study_task.id and study_status='finish')) ,0) -->
    <select id="myStatistics" resultType="Map">
        select
        ifnull((select sum(study_time) from exam_study_task_course_user_info   where user_id = #{userId} and del_flag=0) ,0)totalStudyTime,
        ifnull((select count(exam_course_id) from exam_study_task_course_user_info   where user_id = #{userId} and is_finish=1 and del_flag=0),0) totalCourseNum,
        ifnull((select count(task_id) from exam_study_task_user_info where user_id = #{userId} and del_flag=0 and study_status in ('wait','doing') and exists (select id from exam_study_task where id=exam_study_task_user_info.task_id and is_public=0 and del_flag=0 and status=1)),0)

           currentTaskNum,
        ifnull((select count(id) from exam_examination_record where user_id = #{userId} and del_flag=0),0) examNum,
        0 collectionNum
    </select>

    <select id="getUserList" resultType="Map">
        <choose>
            <when test="join!=null and join==true">
                select
                t1.*,
                case when t4.parent_id>0 then (select dept_name from sys_dept where id = t4.parent_id )
                when t4.id is null then ''
                else t4.dept_name end  as companyName
                ,t4.dept_name deptName
                from (
                select
                user_id
                from exam_study_task_user_info
                where task_id=#{id} and del_flag=0
                order by ${sort} ${order}
                ) t
                inner join sys_user t1 on t1.del_flag=0 and t1.id=t.user_id
                left join sys_dept t4 on t1.dept_id=t4.id and t4.del_flag=0
                where 1=1
                <if test="baseReq.kw!=null and baseReq.kw!=''">
                    and LOCATE( #{baseReq.kw},t1.name)
                </if>
                <if test="baseReq.startTime!=null">
                    and t1.create_date &gt;=#{baseReq.startTime}
                </if>
                <if test="baseReq.endTime!=null">
                    and t1.create_date &lt;=#{baseReq.endTime}
                </if>
            </when>
            <otherwise>
                select
                t1.*,
                case when t4.parent_id>0 then (select dept_name from sys_dept where id = t4.parent_id )
                when t4.id is null then ''
                else t4.dept_name end  as companyName
                ,t4.dept_name deptName
                from sys_user t1
                <!-- 注释掉，可以关联统一认证用户 -->
                <!--inner join sys_user_role t2 on t1.id=t2.user_id
                inner join sys_role t3 on t2.role_id=t3.id and t3.role_code='role_user'-->
                left join sys_dept t4 on t1.dept_id=t4.id and t4.del_flag=0
                where t1.del_flag=0
                <if test="baseReq.kw!=null and baseReq.kw!=''">
                    and LOCATE( #{baseReq.kw},t1.name)
                </if>
                <if test="baseReq.startTime!=null">
                    and t1.create_date &gt;=#{baseReq.startTime}
                </if>
                <if test="baseReq.endTime!=null">
                    and t1.create_date &lt;=#{baseReq.endTime}
                </if>
                and t1.id not in (select user_id from exam_study_task_user_info where task_id=#{id} and del_flag=0)
                order by ${sort} ${order}
            </otherwise>
        </choose>
    </select>

    <select id="getCourseList" resultType="Map">
        <choose>
            <when test="join!=null and join==true">
                select
                t.task_id taskId,t.course_id courseId,t.create_date createDate, t1.course_name courseName,
                t1.course_time
                courseTime,t1.study_time studyTime,t1.pic
                from (
                select
                course_id,task_id,create_date
                from exam_study_task_course_relation
                where task_id=#{id} and del_flag=0
                order by create_date desc
                ) t
                inner join exam_study_task t2 on t2.id=t.task_id and t2.del_flag=0
                inner join exam_course t1 on t2.major=t1.major and t1.del_flag=0 and t1.id=t.course_id and t1.status=1
                where 1=1
                <if test="baseReq.kw!=null and baseReq.kw!=''">
                    and LOCATE( #{baseReq.kw},t1.course_name)
                </if>
            </when>
            <otherwise>
                select
                t1.id courseId,t1.create_date createDate, t1.course_name courseName, t1.course_time
                courseTime,t1.study_time studyTime,t1.pic
                from exam_course t1
                where 1=1
                <if test="baseReq.kw!=null and baseReq.kw!=''">
                    and LOCATE( #{baseReq.kw},t1.course_name)
                </if>
                and t1.status=1 and t1.del_flag=0
                and t1.major=(select major from exam_study_task where id=#{id} limit 1)
                and t1.id not in (select course_id from exam_study_task_course_relation where task_id=#{id} and
                del_flag=0)
            </otherwise>
        </choose>
    </select>


    <select id="sumStudyTime" resultType="int">
        select sum(t1.course_time)
        from exam_study_task_course_relation t
        inner join exam_course t1 on t.task_id=#{id} and t.course_id=t1.id and t.del_flag=0 and t1.del_flag=0
    </select>

    <select id="studyRecordList" resultType="map">
        select
        t1.name userName,
        t2.course_name courseName,
        t2.course_introduce courseIntroduce,
        t2.course_type courseType,
        t.id,
        t.user_id userId,
        t.task_id taskId,
        t.exam_course_id examCourseId,
        t.study_time studyTime,
        t.is_finish isFinish,
        t.modify_date modifyDate
        from exam_study_task_course_user_info t
        LEFT JOIN sys_user t1 ON t.user_id=t1.id
        inner join exam_course t2 on t.exam_course_id=t2.id
        where 1=1
        <if test="baseReq.kw!=null and baseReq.kw!=''">
            and (LOCATE( #{baseReq.kw},t2.course_name) or LOCATE( #{baseReq.kw},t1.name) )
        </if>
        <if test="baseReq.startTime!=null">
            and t.modify_date &gt;=#{baseReq.startTime}
        </if>
        <if test="baseReq.endTime!=null">
            and t.modify_date &lt;=#{baseReq.endTime}
        </if>
        order by t.${sort} ${order}
    </select>

    <select id="myCourse" resultType="map">
        select
        t.id,
        t.course_name courseName,
        t.course_introduce courseIntroduce,
        t.teacher,
        t.course_description courseDescription,
        t.study_time studyTime,
        t.course_time courseTime,
        t.pic,
        t.video,
        t.video_pic,
        t.create_date createDate,
        t.course_type courseType,
        ifnull(t2.is_finish,0) isFinish,
        t1.task_id taskId
        from
        exam_course t
        inner join exam_study_task_course_relation t1
        on t.id=t1.course_id and t1.del_flag=0 and t.del_flag=0 and t1.task_id=#{taskId} and t1.course_id=#{courseId}
        left join exam_study_task_course_user_info t2
        on t1.task_id=t2.task_id and t1.course_id=t2.exam_course_id and t2.del_flag=0
        <if test="userId!=null">
            and t2.user_id=#{userId}
        </if>
        group by t.id
    </select>

    <select id="statistics" resultType="map">
        select
        t.id,t.task_name,t.create_date,t.status,
        case when t.is_public=0 then ifnull(t1.wait_num,0) + ifnull(t2.finish_num,0)
        else t3.total_user_count end as total_user_count,
        ifnull(t2.finish_num,0) finish_user_num
        from
        exam_study_task t
        left join ( select task_id,count(*) wait_num from exam_study_task_user_info where del_flag=0 and study_status='wait' group by task_id) t1
        on t.id=t1.task_id
        left join ( select task_id,count(*) finish_num from exam_study_task_user_info where del_flag=0 and study_status='finish' group by task_id) t2
        on t.id=t2.task_id
        left join ( select  count(u.id) total_user_count   from sys_user u
                inner join sys_user_role ur on u.id=ur.user_id and u.status=0 and u.del_flag=0
                inner join sys_role r on ur.role_id=r.id and r.role_code='role_user' ) t3 on 1=1
        where t.del_flag=0 and t.status=1
        <if test="baseReq.kw!=null and baseReq.kw!=''">
            and LOCATE( #{baseReq.kw},t.task_name)
        </if>
        <if test="baseReq.startTime!=null">
            and t.create_date &gt;=#{baseReq.startTime}
        </if>
        <if test="baseReq.endTime!=null">
            and t.create_date &lt;=#{baseReq.endTime}
        </if>
        order by t.${sort} ${order}
    </select>

    <select id="userLoginStatistics" resultType="map">
        select
        u.name,u.phone,count(*) num, max(l.create_date) last_login_time,min(l.create_date) first_login_time
        from
        sys_user u
        inner join sys_user_role ur on u.id=ur.user_id and u.status=0 and u.del_flag=0
        inner join sys_role r on ur.role_id=r.id and r.role_code='role_user'
        inner join sys_user_auths ua on u.id=ua.user_id
        inner join sys_log l on l.creator=ua.identifier and l.del_flag=0 and l.title='用户登录'
        where 1=1
        <if test="baseReq.kw!=null and baseReq.kw!=''">
            and ( LOCATE( #{baseReq.kw},u.name) or  u.phone=#{baseReq.kw} )
        </if>
        <if test="baseReq.startTime!=null">
            and l.create_date &gt;=#{baseReq.startTime}
        </if>
        <if test="baseReq.endTime!=null">
            and l.create_date &lt;=#{baseReq.endTime}
        </if>
        group by u.name,u.phone,l.creator
        order by num desc
    </select>

    <select id="accessTimeStatistics" resultType="map">
    SELECT
	concat( t.date, concat( ' ', sec_to_time( time * 1800 ) ) ) startTime,
	concat( t.date, concat( ' ', sec_to_time( ( time + 1 ) * 1800 ) ) ) endTime,
	count( * ) num
    FROM
        (
    SELECT
        date_format( date( l.create_date ), '%Y-%m-%d' ) date,
        floor( time_to_sec( time( l.create_date ) ) / 60 / 30 ) time
    FROM
        sys_log l
    WHERE
        l.del_flag = 0
        AND l.title = '用户登录'
        <if test="baseReq.startTime!=null">
            and l.create_date &gt;=#{baseReq.startTime}
        </if>
        <if test="baseReq.endTime!=null">
            and l.create_date &lt;=#{baseReq.endTime}
        </if>
        ) t
    GROUP BY
        date,
        time
    ORDER BY
        date DESC,
        time DESC
    </select>

    <select id="accessNumStatistics" resultType="map">

    </select>

    <select id="courseListForFe" resultType="map">
        select
        t.*,
        t1.task_id
        from exam_course t
        inner join exam_study_task_course_relation t1 on t1.course_id= t.id and t1.del_flag=0
        inner join exam_study_task t2 on t1.task_id=t2.id and t2.del_flag=0 and t2.status=1 and t2.is_public=1
        where t.del_flag=0 and t.status=1
        group by t.id
        order by  t.${sort} ${order}
    </select>

    <select id="getMyTaskMajorList" resultType="String">
        SELECT DISTINCT
            xx.major
        FROM
            (
                (SELECT
                     t1.major
                 FROM
                     exam_study_task t1
                         INNER JOIN exam_study_task_user_info t2
                                    ON t1.id = t2.task_id
                                        AND t2.user_id = #{userId}
                 WHERE t1.is_public = 0
                   AND t1.del_flag = 0
                   AND t2.del_flag = 0
                   AND t1.status_a = 1
                   AND t1.status = 1
                 GROUP BY t1.major)
                UNION
                    ALL
                (SELECT
                     t1.major
                 FROM
                     exam_study_task t1
                 WHERE t1.is_public = 1
                   AND t1.del_flag = 0
                   AND t1.status_a = 1
                   AND t1.status = 1
                 GROUP BY t1.major)
            ) xx;
    </select>


    <select id="getTaskList" resultType="map">
        select xx.* from (
        (
        select
        t2.*,
        ifnull((select modify_date from exam_study_task_course_user_info where task_id=t.task_id and user_id=t.user_id
        and del_flag=0 order by modify_date desc limit 1) ,t.modify_date) studyDateTime,
        ifnull(t.study_time/t2.total_study_time * 100 ,0) percent,
        t.study_status
        from
        (select
        task_id,modify_date,study_time,study_status,user_id
        from exam_study_task_user_info
        where user_id=#{userId}
        )t
        inner join exam_study_task t2 on t2.id=t.task_id and t2.del_flag=0 and t2.is_public=0 and t2.status=1 and t2.major=#{major}
        )
        Union all
        (
        select
        t2.*,
        ifnull((select modify_date from exam_study_task_course_user_info where task_id=t2.id and del_flag=0 and user_id=#{userId}
        order by modify_date desc limit 1) ,t2.modify_date) studyDateTime,
        ifnull(t.study_time/t2.total_study_time * 100 ,0) percent,
        t.study_status
        from exam_study_task t2
        left join exam_study_task_user_info t on t.task_id=t2.id and t2.del_flag=0 and t2.is_public=1 and t.user_id=#{userId}
        where
        t2.is_public=1
        and t2.del_flag=0
        and t2.status=1
        )
        ) xx
        where major=#{major}
        order by ${sort} ${order}
    </select>

    <select id="getPublicTaskList" resultType="map">
        SELECT * FROM exam_study_task
        WHERE major=#{major}
        and is_public=1
        and del_flag=0
        and status=1
        ORDER BY ${sort} ${order}
    </select>

    <select id="getMajorList" resultType="String">
        SELECT DISTINCT major
        FROM exam_study_task
        WHERE is_public=1
          AND `status_a`=1
          AND `status`=1
          AND del_flag=0
        GROUP BY major;
    </select>

    <select id="getCourseWithMajorAndTaskId" resultType="map">
        SELECT c.`course_name`,c.`course_type`,c.`study_time`,c.`teacher`,c.`major`,c.`course_introduce`,c.`pic`,c.`video`,c.`id` courseId,r.`task_id` taskId
        FROM `exam_course` c
        INNER JOIN `exam_study_task_course_relation` r
        ON c.`id`=r.`course_id` AND r.`task_id`=#{taskId}
        WHERE major=#{major}
    </select>

</mapper>
